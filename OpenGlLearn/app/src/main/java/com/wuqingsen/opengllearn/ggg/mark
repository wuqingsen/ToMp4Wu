OpenGL简单实用说明

主要内容：构建简单物体

下面使用三角形带和三角形扇来绘制一个冰球和木槌。其实就如同纸张来黏贴他们一样：首先，
我们需要圆形作为顶，需要一个长方形卷成一个圆柱作为边。将两者粘合在一起就做成了冰球。
在冰球的基础上添加一个比较高而且直径比较小的圆柱，木槌就做好了。

1.添加几何图形的类
  他们都在 util 包中的 Geometry 中，分别有 Point, Circle, Cylinder 分别代表
  点，圆和圆柱体。接下来在 objects 包中有一个 ObjectBuilder 类用于创建物体，下面是
  主要方法，第一个是创建冰球：

  ==============================代码开始=======================================
  static GeneratedData createPuck(Cylinder puck, int numPoints) {
      int size = sizeOfCircleInVertices(numPoints)
               + sizeOfOpenCylinderInVertices(numPoints);

      ObjectBuilder builder = new ObjectBuilder(size);

      Circle puckTop = new Circle(
          puck.center.translateY(puck.height / 2f),
          puck.radius);

      builder.appendCircle(puckTop, numPoints);
      builder.appendOpenCylinder(puck, numPoints);

      return builder.build();
  }
  ==============================代码结束=======================================

  首先计算创建一个冰球需要几个点，用 size 传给 ObjectBuilder ,在 ObjectBuilder 中即初始化相应
  大小的内存。在生成了冰球的顶部后，我们计算冰球的顶部应该放在哪里，并调用 appendCircle() 创建它。
  通过调用 appendOpenCylinder 我们也生成了冰球的侧面，之后通过返回 build() 的结果返回数据。

2. appendCircle 的主要代码如下：

  ==============================代码开始=======================================
  private void appendCircle(Circle circle, int numPoints) {
      final int startVertex = offset / FLOATS_PER_VERTEX;
      final int numVertices = sizeOfCircleInVertices(numPoints);

      // Center point of fan
      vertexData[offset++] = circle.center.x;
      vertexData[offset++] = circle.center.y;
      vertexData[offset++] = circle.center.z;

      // Fan around center point. <= is used because we want to generate
      // the point at the starting angle twice to complete the fan.
      for (int i = 0; i <= numPoints; i++) {
          float angleInRadians =
                ((float) i / (float) numPoints)
              * ((float) Math.PI * 2f);

          vertexData[offset++] =
                circle.center.x
              + circle.radius * FloatMath.cos(angleInRadians);
          vertexData[offset++] = circle.center.y;
          vertexData[offset++] =
                circle.center.z
              + circle.radius * FloatMath.sin(angleInRadians);
      }
      drawList.add(new DrawCommand() {
          @Override public void draw() {
              glDrawArrays(GL_TRIANGLE_FAN, startVertex, numVertices);
          }
      });
  }
  ==============================代码结束=======================================

  要构建三角形扇，我们首先在 circle.center 定义一个圆心顶点，接着我们围绕圆心的点按扇形展开，并
  把第一个点绕圆周重复两次考虑在内。为了生成一个圆周边的点，我们首先需要一个循环，它的范围涵盖从 0 到
  360度的整个圆，或者 0 到 2π 弧度。我们需要找到圆周上的一个点的 x 的位置，我们要调用 cos(angle),
  要找他 z 的位置，我们调用 sin(angle),我们用圆的半径缩放这两个位置。因为这个圆将被平放到在 x-z 平面
  上，单位圆的 y 分量就会映射到 y 的位置上。后面将
  glDrawArrays(GL_TRIANGLE_FAN,startVVertex,numVertices);加入绘制命令队列中。

3. appendOpenCylinder() 的主要代码:

  ==============================代码开始=======================================
  private void appendOpenCylinder(Cylinder cylinder, int numPoints) {
      final int startVertex = offset / FLOATS_PER_VERTEX;
      final int numVertices = sizeOfOpenCylinderInVertices(numPoints);
      final float yStart = cylinder.center.y - (cylinder.height / 2f);
      final float yEnd = cylinder.center.y + (cylinder.height / 2f);

      // Generate strip around center point. <= is used because we want to
      // generate the points at the starting angle twice, to complete the
      // strip.
      for (int i = 0; i <= numPoints; i++) {
          float angleInRadians =
                ((float) i / (float) numPoints)
              * ((float) Math.PI * 2f);

          float xPosition =
                cylinder.center.x
              + cylinder.radius * FloatMath.cos(angleInRadians);

          float zPosition =
                cylinder.center.z
              + cylinder.radius * FloatMath.sin(angleInRadians);

          vertexData[offset++] = xPosition;
          vertexData[offset++] = yStart;
          vertexData[offset++] = zPosition;

          vertexData[offset++] = xPosition;
          vertexData[offset++] = yEnd;
          vertexData[offset++] = zPosition;
      }
      drawList.add(new DrawCommand() {
          @Override public void draw() {
              glDrawArrays(GL_TRIANGLE_STRIP, startVertex, numVertices);
          }
      });
  }
  ==============================代码结束=======================================

  我们使用了同前面生产圆周顶点一样的算法，只是这次为圆周上的每个点生成了两个顶点。一个是圆柱顶部，另一个
  是圆柱底部。前面两个点的位置重复两次以使这个圆柱体闭合。使用
  glDrawArrays(GL_TRIANGLE_STRIP,startVertex,numVertices);告诉 OpenGL 绘制一个三角形带。
  现在我们就可以用两个圆柱体来构成一个木槌，具体请参见 createMallet 这个方法。

  

















